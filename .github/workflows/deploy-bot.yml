name: Build and Deploy Bot

on:
  push:
    branches: [master, main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'reports/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      
      - name: Image digest
        run: echo "Image digest ${{ steps.build.outputs.digest }}"

  deploy:
    name: Deploy to Remote Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployment/
          sparse-checkout-cone-mode: false
      
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      
      - name: Create .env file on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p ~/binance-adviser
            cat > ~/binance-adviser/.env << 'ENVEOF'
          # Production Environment - Auto-generated by GitHub Actions
          TRADING_MODE=${{ secrets.TRADING_MODE }}
          
          # Database Configuration
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_SSLMODE=${{ secrets.DB_SSLMODE }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          
          # Binance API
          BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}
          BINANCE_SECRET_KEY=${{ secrets.BINANCE_SECRET_KEY }}
          BINANCE_TEST_API_KEY=${{ secrets.BINANCE_TEST_API_KEY }}
          BINANCE_TEST_SECRET_KEY=${{ secrets.BINANCE_TEST_SECRET_KEY }}
          BINANCE_BASE_URL=${{ secrets.BINANCE_BASE_URL }}
          BINANCE_WS_URL=${{ secrets.BINANCE_WS_URL }}
          
          # External APIs
          COINGLASS_API_KEY=${{ secrets.COINGLASS_API_KEY }}
          TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN }}
          APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          SANTIMENT_API_KEY=${{ secrets.SANTIMENT_API_KEY }}
          POLYGON_API_KEY=${{ secrets.POLYGON_API_KEY }}
          
          # Application Settings
          PAIR=${{ secrets.PAIR }}
          ENVEOF
          EOF
      
      - name: Deploy container
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            
            cd ~/binance-adviser
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            docker pull ghcr.io/demetrius2017/binance_adviser:master
            
            # Stop and remove old container if exists
            docker stop binance-adviser-bot 2>/dev/null || true
            docker rm binance-adviser-bot 2>/dev/null || true
            
            # Create directories for volumes
            mkdir -p ~/binance-adviser/logs ~/binance-adviser/reports ~/binance-adviser/cache
            
            # Run new container
            docker run -d \
              --name binance-adviser-bot \
              --restart unless-stopped \
              --env-file ~/binance-adviser/.env \
              -v ~/binance-adviser/logs:/app/logs \
              -v ~/binance-adviser/reports:/app/reports \
              -v ~/binance-adviser/cache:/app/cache \
              --memory=2g \
              --cpus=2.0 \
              ghcr.io/demetrius2017/binance_adviser:master
            
            # Show container status
            docker ps -a | grep binance-adviser-bot
            
            # Show recent logs
            echo "=== Recent logs ==="
            docker logs --tail 50 binance-adviser-bot
          EOF
      
      - name: Verify deployment
        run: |
          sleep 10
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            if docker ps | grep -q binance-adviser-bot; then
              echo "✅ Container is running"
              docker stats --no-stream binance-adviser-bot
            else
              echo "❌ Container failed to start"
              docker logs binance-adviser-bot
              exit 1
            fi
          EOF
      
      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest:** \`${{ needs.build-and-push.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Server:** \`${{ secrets.SSH_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Container:** \`binance-adviser-bot\`" >> $GITHUB_STEP_SUMMARY
